{"version":3,"sources":["Chart.js","Panel.js","index.js"],"names":["Chart","react_default","a","createElement","className","Panel","MoveableElemet","props","throttles","properties","allowMoveable","onDuplicate","onRemove","target","setTarget","useState","useEffect","document","getElementById","id","classSelector","console","log","Fragment","style","attributes","position","width","concat","height","top","left","background","backgroundColor","transform","rotate","color","fontColor","fontWeight","boxSizing","cursor","generateStyleObject","flexDirection","display","justifyContent","alignItems","name","src_Chart","src_Panel","moveable_esm","draggable","origin","resizable","rotatable","throttleDrag","throttleResize","throttleScale","onDragStart","_ref","clientX","clientY","onScale","_ref2","delta","isPinch","onDrag","_ref3","beforeDelta","beforeDist","right","bottom","dist","onDragEnd","e","onResizeStart","_ref4","onResize","_ref5","direction","beforeTranslate","drag","onResizeEnd","_ref6","isDrag","onRotateStart","_ref7","onRotate","_ref8","onRotateEnd","_ref9","App","targets","setTargets","isMoveable","setIsMoveable","index_es","defaultScale","options","disabled","minScale","wheel","zoomIn","step","zoomOut","_ref10","resetTransform","rest","zIndex","pointerEvents","map","key","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.405c34c0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\nfunction Chart() {\r\n    return (\r\n        <div className=\"tooltip\">\r\n            This is from chart..!\r\n            <span className=\"tooltiptext\">Tooltip for chart</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nfunction Panel() {\r\n    return (\r\n        <div className=\"tooltip\">\r\n            This is Panel..!\r\n            <span className=\"tooltiptext\">Tooltip for panel</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Panel;\r\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Moveable from \"react-moveable\";\nimport Chart from './Chart';\nimport Panel from './Panel';\n// import shortid from \"shortid\";\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nconst MoveableElemet = (props) => {\n  // Changes in rotate throttle may lead to invalid \"left\" and \"top\"\n  const throttles = { drag: 10, resize: 10, rotate: 90, scale: 0.1 };\n  // const bounds = { left: 0, top: 0, right: 490, bottom: 490 };\n  const { properties, allowMoveable, onDuplicate, onRemove } = props;\n  // const [privateProps, setPrivateProps] = useState(properties);\n  // const [tempProps, setTempProps] = useState({});\n  // const [isHovered, setIsHovered] = useState(false);\n  // const [isClicked, setIsClicked] = useState(false);\n  // const [isMoveable, setIsMoveable] = useState(false);\n  const [target, setTarget] = useState();\n\n  useEffect(() => {\n    setTarget(document.getElementById(properties.id));\n  }, [properties.id, properties.classSelector]);\n\n  const generateStyleObject = (attributes) => ({\n    position: \"absolute\",\n    width: `${attributes.width}px`,\n    height: `${attributes.height}px`,\n    top: `${attributes.top}px`,\n    left: `${attributes.left}px`,\n    background: attributes.backgroundColor,\n    transform: `rotate(${attributes.rotate}deg)`,\n    color: attributes.fontColor,\n    fontWeight: \"bold\",\n    boxSizing: \"border-box\",\n    cursor: \"pointer\"\n  });\n\n  // const onMouseEnter = () => {\n  //   setIsHovered(true);\n  //   setIsMoveable(true);\n  // };\n\n  // const onMouseLeave = () => {\n  //   setIsHovered(false);\n  //   setIsMoveable(isClicked);\n  // };\n\n  // const onMouseDown = () => {\n  //   setIsClicked(true);\n  //   setIsMoveable(true);\n  // };\n\n  // const onMouseUp = () => {\n  //   setIsClicked(false);\n  //   setIsMoveable(isHovered);\n  // };\n\n  // const onDoubleClick = () => {\n  //   setIsHovered(false);\n  //   setIsClicked(false);\n  //   setIsMoveable(false);\n  // };\n\n  // const duplicateButton = (\n  //   <button\n  //     onClick={() => onDuplicate(properties.id)}\n  //     onTouchStart={() => onDuplicate(properties.id)}\n  //   >\n  //     X2\n  //   </button>\n  // );\n\n  // const removeButton = (\n  //   <button\n  //     onClick={() => onRemove(properties.id)}\n  //     onTouchStart={() => onRemove(properties.id)}\n  //   >\n  //     RM\n  //   </button>\n  // );\n\n  console.log(\"properties\", properties);\n\n  return (\n    <React.Fragment>\n      <div\n        id={properties.id}\n        className={properties.classSelector}\n        style={generateStyleObject(properties)}\n      // onMouseEnter={onMouseEnter}\n      // onMouseLeave={onMouseLeave}\n      // onMouseDown={onMouseDown}\n      // onMouseUp={onMouseUp}\n      // onDoubleClick={onDoubleClick}\n      >\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            position: \"relative\",\n            flexDirection: \"column\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            transform: `rotate(${-1 * properties.rotate}deg)`\n          }}\n        >\n          {properties.name === \"Chart\" ? <Chart /> : <Panel />}\n          {/* {allowMoveable ? duplicateButton : null} */}\n          {/* {allowMoveable ? removeButton : null} */}\n        </div>\n      </div>\n      {allowMoveable ? (\n        <Moveable\n          target={target}\n          draggable={true}\n          // scalable={true}\n          origin={false}\n          resizable={true}\n          rotatable={true}\n          // pinchable={true}\n          // snappable={true}\n          // keepRatio={true}\n          throttleDrag={throttles.drag}\n          throttleResize={throttles.resize}\n          throttleScale={throttles.scale}\n          // renderDirections={[\"nw\", \"n\", \"ne\", \"w\", \"e\", \"sw\", \"s\", \"se\"]}\n          // edge={false}\n          // zoom={1}\n\n          // padding={{ left: 0, top: 0, right: 0, bottom: 0 }}\n          onDragStart={({ target, clientX, clientY }) => {\n            // console.log(\"onDragStart\", target);\n          }}\n          onScale={({ target, delta, clientX, clientY, isPinch }) => {\n            // const scaleX = this.frame.get(\"transform\", \"scaleX\") * delta[0];\n            // const scaleY = this.frame.get(\"transform\", \"scaleY\") * delta[1];\n            // target.style.scaleX = `${scaleX}px`\n            // target.style.scaleY = `${scaleY}px`\n            // this.setTransform(target);\n            // delta[0] && (target.style.width = `${width}px`);\n            // delta[1] && (target.style.height = `${height}px`);\n            // setTempProps({});\n\n          }}\n          onDrag={({\n            target,\n            beforeDelta,\n            beforeDist,\n            left,\n            top,\n            right,\n            bottom,\n            delta,\n            dist,\n            transform,\n            clientX,\n            clientY\n          }) => {\n            // console.log(\"onDrag left, top\", left, top);\n            // target.style.left = `${left}px`;\n            // target.style.top = `${top}px`;\n            // console.log(\"onDrag translate\", dist);\n            // target.style.transform = transform;\n            target.style.left = `${left}px`;\n            target.style.top = `${top}px`\n            // properties.left = left;\n            // setTargets({ ...targets, targets[properties.num].left: properties.left});\n            // console.log(\"properties.left \", properties.left);\n            // let deltaX = dist[0];\n            // let deltaY = dist[1];\n            // if (privateProps.rotate === 90) {\n            //   deltaX = dist[1] * -1;\n            //   deltaY = dist[0];\n            // } else if (privateProps.rotate === 180) {\n            //   deltaX = dist[0] * -1;\n            //   deltaY = dist[1] * -1;\n            // } else if (privateProps.rotate === 270) {\n            //   deltaX = dist[1];\n            //   deltaY = dist[0] * -1;\n            // }\n            // setTempProps({ left: deltaX, top: deltaY });\n          }}\n          onDragEnd={(e) => {\n            // console.log(\"onDragEnd\", target, isDrag, clientX, clientY);\n\n            // setPrivateProps({\n            //   ...privateProps,\n            //   left:\n            //     tempProps.left !== undefined\n            //       ? privateProps.left + tempProps.left\n            //       : privateProps.left,\n            //   top:\n            //     tempProps.top !== undefined\n            //       ? privateProps.top + tempProps.top\n            //       : privateProps.top\n            // });\n            // setTempProps({});\n          }}\n          onResizeStart={({ target, clientX, clientY }) => {\n            // console.log(\"onResizeStart\", target);\n          }}\n          onResize={({\n            target,\n            width,\n            height,\n            dist,\n            delta,\n            direction,\n            clientX,\n            clientY,\n            beforeTranslate,\n            drag,\n            e,\n          }) => {\n            // console.log(\"onResize\", target);\n            // console.log(\"onResize\", delta);f\n            delta[0] && (target.style.width = `${width}px`);\n            delta[1] && (target.style.height = `${height}px`);\n            target.style.left = `${drag.left}px`;\n            target.style.top = `${drag.top}px`;\n            // setPrivateProps({\n            //   ...privateProps,\n            //   width: width,\n            //   height: height\n            // });\n            // setTempProps({});\n          }}\n          onResizeEnd={({ target, isDrag, clientX, clientY }) => {\n            // console.log(\"onResizeEnd\", target, isDrag);\n          }}\n          onRotateStart={({ target, clientX, clientY }) => {\n            // console.log(\"onRotateStart\", target);\n          }}\n          onRotate={({ target, delta, dist, transform, clientX, clientY }) => {\n            console.log(\"onRotate\", dist);\n            // const angle = (privateProps.rotate + dist) % 360;\n            // setTempProps({ rotate: angle < 0 ? 360 + angle : angle });\n            target.style.transform = transform;\n          }}\n          onRotateEnd={({ target, isDrag, clientX, clientY }) => {\n            // console.log(\"onRotateEnd\", target, isDrag);\n            // setPrivateProps({\n            //   ...privateProps,\n            //   rotate:\n            //     tempProps.rotate !== undefined\n            //       ? tempProps.rotate\n            //       : privateProps.rotate\n            // });\n            // setTempProps({});\n          }}\n        // onPinchStart={({ target, clientX, clientY, datas }) => {\n        //   // pinchStart event occur before dragStart, rotateStart, scaleStart, resizeStart\n        //   // console.log(\"onPinchStart\");\n        // }}\n        // onPinch={({ target, clientX, clientY, datas }) => {\n        //   // pinch event occur before drag, rotate, scale, resize\n        //   // console.log(\"onPinch\");\n        // }}\n        // onPinchEnd={({ isDrag, target, clientX, clientY, datas }) => {\n        //   // pinchEnd event occur before dragEnd, rotateEnd, scaleEnd, resizeEnd\n        //   // console.log(\"onPinchEnd\");\n        // }}\n        />\n      ) : null}\n    </React.Fragment>\n  );\n};\n\n// const targetTemplate = {\n//   classSelector: \"targets\",\n//   name: \"Target\",\n//   width: 100,\n//   height: 100,\n//   top: 100,\n//   left: 100,\n//   rotate: 0,\n//   backgroundColor:\n//     \"repeating-linear-gradient(45deg,#95d46f,#95d46f 10px,#d4d1d1 10px,#d4d1d1 20px)\",\n//   fontColor: \"white\"\n// };\n\nconst App = () => {\n  const [targets, setTargets] = useState([\n    {\n      id: \"target\",\n      classSelector: \"targets\",\n      name: \"Chart\",\n      width: 350,\n      height: 100,\n      top: 100,\n      left: 100,\n      rotate: 0,\n      backgroundColor:\n        \"lightblue\",\n      fontColor: \"black\"\n    },\n    {\n      id: \"target2\",\n      classSelector: \"targets\",\n      name: \"Panel\",\n      width: 200,\n      height: 200,\n      top: 300,\n      left: 500,\n      rotate: 0,\n      backgroundColor:\n        \"lightblue\",\n      fontColor: \"black\"\n    }\n  ]);\n\n  // console.log(\"targets\", targets);\n  useEffect(() => {\n    console.log(\"targets\", targets);\n  }, [targets]);\n  const [isMoveable, setIsMoveable] = useState(true);\n\n  // const onAddMore = () => {\n  //   const newTarget = { ...targetTemplate };\n  //   newTarget.id = shortid.generate();\n  //   newTarget.name = `${newTarget.name}`;\n  //   setTargets([...targets, newTarget]);\n  // };\n\n  // const toggleMoveable = () => {\n  //   setIsMoveable(!isMoveable);\n  // };\n\n  // const onDuplicate = (id) => {\n  //   const newTarget = { ...targets.find((item) => item.id === id) };\n  //   newTarget.id = shortid.generate();\n  //   newTarget.name = `${newTarget.name}`;\n  //   setTargets([...targets, newTarget]);\n  // };\n\n  // const onRemove = (id) => {\n  //   const index = targets.findIndex((item) => item.id === id);\n  //   setTargets([...targets.slice(0, index), ...targets.slice(index + 1)]);\n  // };\n\n  return (\n    <TransformWrapper\n      defaultScale={1}\n      options={{ disabled: isMoveable, minScale: 0.2 }}\n      wheel={{ disabled: true }}\n      zoomIn={{ step: 10 }}\n      zoomOut={{ step: 10 }}\n    >\n      {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n        <React.Fragment>\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"10px\",\n              right: \"10px\",\n              zIndex: 100\n            }}\n          >\n            {/* <button onClick={zoomIn}>+</button>\n            <button style={{ marginLeft: \"10px\" }} onClick={zoomOut}>\n              -\n            </button>\n            <button style={{ marginLeft: \"10px\" }} onClick={resetTransform}>\n              x\n            </button>\n            <button style={{ marginLeft: \"10px\" }} onClick={onAddMore}>\n              Add More\n            </button> */}\n            {/* <button style={{ marginLeft: \"10px\" }} onClick={toggleMoveable}>\n              Toggle Moveable\n            </button> */}\n          </div>\n          <TransformComponent>\n            <div\n              className=\"container\"\n              style={{\n                width: \"100vw\",\n                height: \"100vh\",\n                pointerEvents: \"auto !important\"\n              }}\n            >\n              {targets.map((target) => (\n                <MoveableElemet\n                  key={target.id}\n                  properties={target}\n                  allowMoveable={isMoveable}\n                />\n              ))}\n            </div>\n          </TransformComponent>\n        </React.Fragment>\n      )}\n    </TransformWrapper>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}